using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Xml.Linq;
using Palmmedia.ReportGenerator.Parser.CodeAnalysis;

namespace Palmmedia.ReportGenerator.Parser
{
    /// <summary>
    /// Parser for XML reports generated by PartCover 2.3.
    /// </summary>
    public class PartCover23Parser : ParserBase, IParser
	{
        /// <summary>
        /// Dictionary containing the assembly names by id.
        /// In PartCover 2.3.0.35109 the assemblies are referenced by an id.
        /// Before only their name was required.
        /// </summary>
        private Dictionary<string, string> assembliesByIdDictionary;

        /// <summary>
        /// The attribute name to the corresponding assembly.
        /// In PartCover 2.3.0.35109 this is "asmref".
        /// </summary>
        private string assemblyAttribute = "asm";

        /// <summary>
        /// Initializes a new instance of the <see cref="PartCover23Parser"/> class.
        /// </summary>
        /// <param name="report">The report file as XContainer.</param>
        public PartCover23Parser(XContainer report)
            : base(report)
        {
            bool lastestPartCoverVersion = false;

            // Determine which version of PartCover 2.3 has been used.
            // In PartCover 2.3.0.35109 the assemblies are referenced by an id and the attribute name in Type elements has changed.
            var assemblies = report.Descendants("Assembly");
            if (assemblies.Any() && assemblies.First().Attribute("id") != null)
            {
                this.assemblyAttribute = "asmref";
                this.assembliesByIdDictionary = assemblies.ToDictionary(a => a.Attribute("id").Value, a => a.Attribute("name").Value);
                lastestPartCoverVersion = true;
            }
            else
            {
                this.assembliesByIdDictionary = assemblies.ToDictionary(a => a.Attribute("name").Value, a => a.Attribute("name").Value);
            }

            // Init the Dictionary containing the line coverage information
            var fileIdByFilenameDictionary = report.Descendants("File").ToDictionary(f => f.Attribute("url").Value, f => f.Attribute("id").Value);

            if (lastestPartCoverVersion)
            {
                AddCoverageDataOfUnexecutedMethods(report);
            }

            foreach (var assembly in this.Assemblies())
            {
                foreach (var clazz in this.ClassesInAssembly(assembly))
                {
                    foreach (var file in this.FilesOfClass(assembly, clazz))
                    {
                        var seqpntsOfFile = report.Descendants("Type").Where(type => this.assembliesByIdDictionary[type.Attribute(this.assemblyAttribute).Value].Equals(assembly) && type.Attribute("name").Value.StartsWith(clazz, StringComparison.Ordinal)).Descendants("pt").Where(seqpnt => seqpnt.Attribute("fid") != null && seqpnt.Attribute("fid").Value.Equals(fileIdByFilenameDictionary[file])).OrderBy(seqpnt => int.Parse(seqpnt.Attribute("sl").Value, CultureInfo.InvariantCulture));

                        if (seqpntsOfFile.Any())
                        {
                            var coverage = new int[int.Parse(seqpntsOfFile.Last().Attribute("sl").Value, CultureInfo.InvariantCulture) + 1];

                            for (int i = 0; i < coverage.Length; i++)
                            {
                                coverage[i] = -1;
                            }

                            foreach (var seqpnt in seqpntsOfFile)
                            {
                                var index = int.Parse(seqpnt.Attribute("sl").Value, CultureInfo.InvariantCulture);
                                var value = int.Parse(seqpnt.Attribute("visit").Value, CultureInfo.InvariantCulture);
                                coverage[index] = coverage[index] == -1 ? value : coverage[index] + value;
                            }

                            this.LineCoverageByFileDictionary.Add(assembly + "_" + clazz + "_" + file, coverage);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Determine all covered files.
        /// </summary>
        /// <returns>All covered files.</returns>
        public IEnumerable<string> Files()
        {
            return this.Report.Descendants("File").Select(f => f.Attribute("url").Value);
        }

        /// <summary>
        /// Determine all covered assemblies.
        /// </summary>
        /// <returns>All covered assemblies.</returns>
        public IEnumerable<string> Assemblies()
        {
            return this.assembliesByIdDictionary.Values.OrderBy(value => value);
        }

        /// <summary>
        /// Determine all covered classes within an assembly.
        /// </summary>
        /// <param name="assemblyname">The name of the assembly.</param>
        /// <returns>All covered classes within an assembly.</returns>
        public IEnumerable<string> ClassesInAssembly(string assemblyname)
        {
            if (!this.assembliesByIdDictionary.ContainsValue(assemblyname))
            {
                return new string[] { };
            }

            return this.Report.Descendants("Type").Where(type => this.assembliesByIdDictionary[type.Attribute(this.assemblyAttribute).Value].Equals(assemblyname) && !type.Attribute("name").Value.Contains("__")).Select(type => type.Attribute("name").Value).OrderBy(name => name);
        }       

        /// <summary>
        /// Determine all files a class is defined in.
        /// </summary>
        /// <param name="assemblyname">The name of the assembly.</param>
        /// <param name="classname">The name of the class.</param>
        /// <returns>All files a class is defined in.</returns>
        public IEnumerable<string> FilesOfClass(string assemblyname, string classname)
        {
            if (!this.assembliesByIdDictionary.ContainsValue(assemblyname))
            {
                return new string[] { };
            }

            var fileIds = this.Report.Descendants("Type").Where(type => this.assembliesByIdDictionary[type.Attribute(this.assemblyAttribute).Value].Equals(assemblyname) && type.Attribute("name").Value.Equals(classname)).Elements("Method").Elements("pt").Where(pt => pt.Attribute("fid") != null).Select(pt => pt.Attribute("fid").Value).Distinct().ToArray();
            return this.Report.Descendants("File").Where(file => fileIds.Contains(file.Attribute("id").Value)).Select(file => file.Attribute("url").Value);            
        }

        /// <summary>
        /// Determine how often a line of code has been covered.
        /// If line could not be covered at all -1 is returned.
        /// </summary>
        /// <param name="assemblyname">The name of the assembly.</param>
        /// <param name="classname">The name of the class.</param>
		/// <param name="fileName">The name of the file.</param>
        /// <param name="lineNumber">The number of the line (starting with 1, not zero based).</param>
        /// <returns>Number of visits.</returns>
		public int NumberOfLineVisits(string assemblyname, string classname, string fileName, int lineNumber)
        {
            if (!this.assembliesByIdDictionary.ContainsValue(assemblyname))
            {
                return -1;
            }

            var key = assemblyname + "_" + classname + "_" + fileName;
            if (this.LineCoverageByFileDictionary.ContainsKey(key))
            {
                var coverage = this.LineCoverageByFileDictionary[key];
                return (coverage.Length > lineNumber) ? coverage[lineNumber] : -1;
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// Returns a <see cref="System.String"/> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String"/> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return this.GetType().Name;
        }

        /// <summary>
        /// Adds the coverage data of unexecuted methods.
        /// </summary>
        /// <param name="report">The report file as XContainer.</param>
        private static void AddCoverageDataOfUnexecutedMethods(XContainer report)
        {
            var unexecutedMethods = report.Descendants("Method").Where(m => !m.Elements().Any());

            var filenameByFileIdDictionary = report.Descendants("File").ToDictionary(f => f.Attribute("id").Value, f => f.Attribute("url").Value);

            foreach (var method in unexecutedMethods)
            {
                MethodInfo methodInfo = new MethodInfo(
                    method.Parent.Attribute("name").Value, 
                    method.Attribute("name").Value, 
                    method.Attribute("sig").Value);

                // Get files in which method could be defined
                var fileIds = method.Parent.Descendants("pt").Where(p => p.Attribute("fid") != null).Select(p => p.Attribute("fid").Value).Distinct();

                foreach (var file in fileIds)
                {
                    var methodResult = Analyzer.FindMethod(filenameByFileIdDictionary[file], methodInfo);

                    if (methodResult != null)
                    {
                        for (int i = methodResult.Start; i <= methodResult.End; i++)
		                {
            			    var seqpnt = new XElement(
                                "pt",
                                new XAttribute("visit", "0"),
                                new XAttribute("fid", file),
                                new XAttribute("sl", i));

                            method.Add(seqpnt);
		                }

                        break;
                    }
                }
            }
        }
	}
}
